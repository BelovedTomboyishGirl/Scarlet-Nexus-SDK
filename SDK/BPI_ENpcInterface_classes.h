// BlueprintGeneratedClass BPI_ENpcInterface.BPI_ENpcInterface_C
// Size: 0x28 (Inherited: 0x28)
struct UBPI_ENpcInterface_C : UInterface {

	void Em8290_ExecAttack(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_ExecAttack // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void OnStartSequencer(int32_t indexIn); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.OnStartSequencer // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_GetParameterTableAttackScale(float Scale); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetParameterTableAttackScale // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetEnpcOutlineAppendMesh(struct TArray<struct UMeshComponent*> MeshComps); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcOutlineAppendMesh // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_GetMetamorphosisParent(struct AActor* ParentActor); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetMetamorphosisParent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_PermitBrainField(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_PermitBrainField // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ShockwaveEffect_Deactivate(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Deactivate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ShockwaveEffect_Add(struct URSParticleSystemComponentBase* Particle, int32_t Index); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Add // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ShockwaveEffect_Get(int32_t Index, struct URSParticleSystemComponentBase* Particle); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Get // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ShockwaveEffect_SetElem(int32_t Index, struct URSParticleSystemComponentBase* Particle, bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_SetElem // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ShockwaveEffect_Clear(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ShockwaveEffect_Clear // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_GetShockwaveEffectArray(struct TArray<struct URSParticleSystemComponentBase*> EffectArray); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetShockwaveEffectArray // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EnableIntenceVoice(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableIntenceVoice // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartDamageMove(struct FVector DamageDir, float Power, bool DeadMove, bool Duumy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.StartDamageMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_TriggerSequenceAfter(bool bAfter, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_TriggerSequenceAfter // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartAimCopyActor(float aimSpeed, float maxAimAngle, bool InternalLock, bool ToCamera, struct FName SocketName, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartAimCopyActor // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EnableAimCopyActor(bool bEnable, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableAimCopyActor // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartSpPsychic(int32_t StartPsychicType, bool Shot, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartSpPsychic // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CopyActorWarmUp(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorWarmUp // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_IsMaskVisible(bool IsVisible); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsMaskVisible // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_IsAttachMask(bool bAttach); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsAttachMask // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsUniqueCondition_Drive(bool bOK); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsUniqueCondition_Drive // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_IsRegisterTelepoMoveLocation(bool IsRegister); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsRegisterTelepoMoveLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8210_EndUniqueNoDead(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_EndUniqueNoDead // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsUniqueCondition_OpenBrainField(bool bOK); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsUniqueCondition_OpenBrainField // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_StartFinishMetamorphosis(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_StartFinishMetamorphosis // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_IsMetamorphosis_Appear(bool bAppear); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamorphosis_Appear // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Em8010_IsMetamorphosis_Disappear(bool bDisappear); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamorphosis_Disappear // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Em8010_IsMetamophosis_ChangeChara(bool bIsMetamorphosis); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamophosis_ChangeChara // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Em8010_IsMetamophosis_BaseChara(bool bIsMetamorphosis); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_IsMetamophosis_BaseChara // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsTemporaryDriveMode(bool IsTempDrive); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsTemporaryDriveMode // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_1stAttack(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_1stAttack // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetEyeMaterial(bool on, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetEyeMaterial // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EnableTargetableCopyActor(int32_t Index, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableTargetableCopyActor // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetMaskVisibility(bool NewVisibility, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetMaskVisibility // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EndDodgeJustFlash(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EndDodgeJustFlash // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_UpdateDodgeJustFlash(float DeltaSec, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateDodgeJustFlash // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartDodgeJustFlash(float FlashIntervalTime, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartDodgeJustFlash // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Ch0900_ForceCopyDead(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0900_ForceCopyDead // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8290_StartDisappear(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_StartDisappear // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8290_SetSafeDestroy(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_SetSafeDestroy // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8290_StartAppearEffect(bool InAppear, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8290_StartAppearEffect // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_UpdateDodgeJust(float DeltaSec, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateDodgeJust // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_SetAction(enum class EPlayerAIBattleThinkType AiType, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetAction // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetWaitEventParty(bool InWait, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetWaitEventParty // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_HomingElecEnd_BrainTalk(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_HomingElecEnd_BrainTalk // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_NotifyDead(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_NotifyDead // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SuicideInformOwner(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SuicideInformOwner // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_SetExecRush(bool bExec, bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetExecRush // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_PlayBattleVoice(enum class EBattleVoice_em8200 EBattleVoiceType, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_PlayBattleVoice // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetEnpcDyingHpRate(float EnpcDyingHpRate); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcDyingHpRate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_StartSpAfterVoice(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartSpAfterVoice // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetLastPhaseHpRate(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetLastPhaseHpRate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_AttachMask(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_AttachMask // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Is Unique Enpc Type(bool IsUnique); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Is Unique Enpc Type // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_SetFakeUniqueName(struct FName FakeName, bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetFakeUniqueName // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_SetFakeUniqueName(struct FName FakeName, bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetFakeUniqueName // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsIgnoreForceFinishMetamorphosis(bool bIgnore); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsIgnoreForceFinishMetamorphosis // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void EnpcBulletAttackEnd(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.EnpcBulletAttackEnd // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_IsEnableDodgeJust(bool bEnable); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_IsEnableDodgeJust // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EnableDodgeJust(bool bEnable, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EnableDodgeJust // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8210_EndDodgeMove(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_EndDodgeMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8210_CanStartDodgeMove(bool CanStart); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_CanStartDodgeMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartDodgeMove(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartDodgeMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsNotRequirementPartner(bool bNotRequirement); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsNotRequirementPartner // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void PassedStartBrainFieldStartHp(bool bDummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.PassedStartBrainFieldStartHp // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetCanPlayExtraSasCutin(bool bCanPlay, enum class ESASCutinExtraID CutinID, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCanPlayExtraSasCutin // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CanPlayExtraSasCutin(enum class ESASCutinExtraID CutinID, bool CanPlay); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CanPlayExtraSasCutin // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_GetBattlePhase(enum class EBattlePhase_em8210 BattlePhase); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetBattlePhase // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetBattlePhase(enum class EBattlePhase_em8210 BattlePhase, bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetBattlePhase // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_EndSpTriggerMove(bool NewParam); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_EndSpTriggerMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_StartSpTriggerMove(bool NewParam); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartSpTriggerMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100UseAfterSpAttack_BrainTalk(bool NewParam); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100UseAfterSpAttack_BrainTalk // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_UseAttackEnd_BrainTalk(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UseAttackEnd_BrainTalk // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_UseSpTrigger_BrainTalk(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_UseSpTrigger_BrainTalk // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_UseAttack_BrainTalk(bool return); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_UseAttack_BrainTalk // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ForceFinishMetamorphosis(bool bBrainFieldCancel, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.ForceFinishMetamorphosis // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_GetBattleType(enum class Enum_BattleType_em8010 BattleType); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_GetBattleType // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Np1100_SetThrowCount(bool bAdd, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SetThrowCount // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_ExecChangeEm8010(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_ExecChangeEm8010 // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_GetChangeEm8010Process(int32_t Process); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetChangeEm8010Process // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_SetChangeEm8010Process(int32_t Value, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetChangeEm8010Process // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_SetBattlePhase(int32_t phase, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SetBattlePhase // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_EndHidden(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_EndHidden // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_StartHidden(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_StartHidden // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Ch0900_CreateCopy(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0900_CreateCopy // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_GetChakramComboList(struct TArray<char> ChakramComboList); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_GetChakramComboList // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Np1100_SelectChakramCombo(struct FString ComboType); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Np1100_SelectChakramCombo // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetStealthReactionInterval(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.SetStealthReactionInterval // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_SetTriggerLocation(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetTriggerLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_GetBattleProcess(int32_t CurProcess); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetBattleProcess // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Ch0500_StartSeeThrough(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Ch0500_StartSeeThrough // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8010_SetAutoAimRate(float NewRate, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8010_SetAutoAimRate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckAbleInterceptInReactionChance(bool bAbleIntercept); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.CheckAbleInterceptInReactionChance // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_SetBattleProcess(int32_t Process, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_SetBattleProcess // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_FireBomb(struct AActor* Parent, bool bHard, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_FireBomb // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_IsAttackBrainField(bool bEnable); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_IsAttackBrainField // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_IsAttackDriveMode(bool bEnable); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_IsAttackDriveMode // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8210_IsHomingEnd(bool bEnd); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_IsHomingEnd // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsActiveEnpcSAS(enum class E_SASKind kind, bool bActive); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsActiveEnpcSAS // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void Em8210_ApplyCommonBranch(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8210_ApplyCommonBranch // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetSpShockWaveLocation(struct FVector Location, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetSpShockWaveLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_PillarIceExtendTime(float ExtendTime, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_PillarIceExtendTime // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetSpStart(bool bSpStart, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.SetSpStart // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsSpStart(bool bSpStart); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.IsSpStart // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartSeeThrough(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartSeeThrough // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StoreHomingElecStartEnd(struct FVector StartLocation, struct FVector EndLocation, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StoreHomingElecStartEnd // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_GetTargetableCopyActor(int32_t Index, struct ARSBattleCharacter_C* RSBattleCharacter); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetTargetableCopyActor // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetCopyActorRotation(int32_t Index, struct FRotator NewRotation, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCopyActorRotation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetCopyActorLocation(int32_t Index, struct FVector NewLocation, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetCopyActorLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_GetCopyActorActive(int32_t Index, bool bActive); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetCopyActorActive // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_GetCopyActorAssultTotalTime(int32_t Index, float TotalTime); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetCopyActorAssultTotalTime // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CopyActorActive(bool bActive, int32_t Index, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorActive // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_UpdateMoveAssultAttack(int32_t NewParam, int32_t NewParam1, int32_t NewParam2); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_UpdateMoveAssultAttack // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CopyActorUpdate(int32_t Index, float DeltaSec, int32_t NextState, bool bEnd); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorUpdate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CopyActorPlayMontage(int32_t Index, struct UAnimMontage* Montage, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CopyActorPlayMontage // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_SetTelepoMoveLocation(struct FVector InputTelepoMoveLocation, bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_SetTelepoMoveLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_GetTelepoMoveLocation(struct FVector OutputTelepoMoveLocation); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_GetTelepoMoveLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_CalcTelepoMoveLocation(enum class ETelepoMoveType_em8200 TelepoType, struct FVector TelepoMoveLocation); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_CalcTelepoMoveLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_EndTelepoMove(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_EndTelepoMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_StartTelepoMove(bool dummy); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_StartTelepoMove // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8200_BulletAttackEnd(enum class EBulletType BulletType, bool bEnd); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8200_BulletAttackEnd // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_GetPartner(struct AActor* PartnerActor); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetPartner // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetEnpcSequencerComponent(struct UBP_ENPCSequencerComponent_C* Component); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcSequencerComponent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetEnpcComponent(struct UBP_ENpcComponent_C* Component); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetEnpcComponent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetBarrierComponent(struct UBP_EnemyBarrierComponent_C* Component); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetBarrierComponent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Em8000_GetBattleType(enum class Enum_BattleType_em8000 BattleType); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.Em8000_GetBattleType // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetENpcParam(struct UBP_ENpc_ParamBase_C* Param); // Function BPI_ENpcInterface.BPI_ENpcInterface_C.GetENpcParam // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
};

