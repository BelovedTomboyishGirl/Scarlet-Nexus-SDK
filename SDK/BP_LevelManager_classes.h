// BlueprintGeneratedClass BP_LevelManager.BP_LevelManager_C
// Size: 0x538 (Inherited: 0x250)
struct ABP_LevelManager_C : ALevelManager {
	struct FPointerToUberGraphFrame UberGraphFrame; // 0x250(0x08)
	struct UBP_LoadCommandComponent_C* LoadCommandComponent; // 0x258(0x08)
	struct UBP_LevelCommandComponent_C* LevelCommandComponent; // 0x260(0x08)
	struct USceneComponent* DefaultSceneRoot; // 0x268(0x08)
	int32_t MaxInfoAreaNum; // 0x270(0x04)
	struct FName CurrentAreaName; // 0x274(0x08)
	enum class E_LevelManagerStatus LevelManagerStatus; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	struct FName OldAreaName; // 0x280(0x08)
	struct TMap<struct FName, struct FS_AreaInfo> LoadedAreaInfos; // 0x288(0x50)
	struct TArray<struct FS_LevelManagerCommand> CommandQueue; // 0x2d8(0x10)
	struct FS_LevelManagerCommand CurrentCommand; // 0x2e8(0x48)
	struct TArray<struct FPrimaryAssetType> LoadedPacks; // 0x330(0x10)
	struct FMulticastInlineDelegate EventFinishWaitAreaVisibleDispatcher; // 0x340(0x10)
	struct FMulticastInlineDelegate EventFinishWaitAreaUnvisibleDispatcher; // 0x350(0x10)
	struct TArray<struct TSoftObjectPtr<UObject>> LoadedLevels; // 0x360(0x10)
	struct TArray<struct FS_LoadedLevelInfo> LoadedLevelInfo; // 0x370(0x10)
	struct TArray<struct FS_LoadedLevelInfo> OldLoadedLevelInfo; // 0x380(0x10)
	struct TMap<struct FName, struct FName> LoadedCameraType; // 0x390(0x50)
	struct FMulticastInlineDelegate EventFinishLoadAssetAsync; // 0x3e0(0x10)
	struct TMap<struct FName, struct FRSStreamingSettings> StreamingSettingsMap; // 0x3f0(0x50)
	struct FName CurrentStreamingSettingsName; // 0x440(0x08)
	bool bTextureStreaming; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)
	struct TMap<struct FName, struct FS_AreaInfo> LocalAreaInfo; // 0x450(0x50)
	struct FMulticastInlineDelegate OnStartCheckLevelVisible; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnEndCheckLevelVisible; // 0x4b0(0x10)
	int32_t DebugSyncUnloadIndex; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct TMap<struct FName, struct FS_AreaInfo> AreaSettingsCache; // 0x4c8(0x50)
	bool IsAreaSettingsCacheDirty; // 0x518(0x01)
	enum class EPlayerCameraPreset CurrentCameraPreset; // 0x519(0x01)
	bool IsNoAreaSelectVariationFunction; // 0x51a(0x01)
	char pad_51B[0x5]; // 0x51b(0x05)
	struct TArray<struct FS_LoadedLevelInfo> StoreSubQuestNpcLevelList; // 0x520(0x10)
	struct FName CurrentSimulatorLevelInfosName; // 0x530(0x08)

	void AreaNameToID(struct FName AreaName, int32_t LocationId, int32_t areaId, int32_t VariationID); // Function BP_LevelManager.BP_LevelManager_C.AreaNameToID // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadUnneedLevels(struct FName UnloadAreaName, struct FName NextAreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadUnneedLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	bool IsNeedFrameWait(); // Function BP_LevelManager.BP_LevelManager_C.IsNeedFrameWait // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RestoreVisibleEventSubQuestNPCLevel(); // Function BP_LevelManager.BP_LevelManager_C.RestoreVisibleEventSubQuestNPCLevel // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UnvisibleEventSubQuestNPCLevel(); // Function BP_LevelManager.BP_LevelManager_C.UnvisibleEventSubQuestNPCLevel // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	bool GetAreaInfoFromNative(struct FName AreName, struct TArray<struct FName> outLevenName); // Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoFromNative // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetBgAreaVisible(struct FName BgAreaName, bool Visible); // Function BP_LevelManager.BP_LevelManager_C.RequestSetBgAreaVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetLastSpawnPlayerInfo(struct FName PortalName, struct FTransform Transform); // Function BP_LevelManager.BP_LevelManager_C.SetLastSpawnPlayerInfo // (Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetCurrentAreaCameraPreset(enum class EPlayerCameraPreset camera preset, bool return); // Function BP_LevelManager.BP_LevelManager_C.GetCurrentAreaCameraPreset // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAreaNaviLevelVisible(bool Visible); // Function BP_LevelManager.BP_LevelManager_C.SetAreaNaviLevelVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelsVisible(struct TArray<struct TSoftObjectPtr<UObject>> Levels, bool AllVisible); // Function BP_LevelManager.BP_LevelManager_C.IsLevelsVisible // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLBPortalLevelsVisibleByAreaName(struct FName AreaName, bool AllVisible); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsVisibleByAreaName // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLBPortalLevelsVisible(int32_t LocationId, int32_t areaId, int32_t VariationID, bool RawCheck, bool IsVisible, bool IsError, struct FS_AreaInfo Area_Info); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsVisible // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetVisibleAndWaitAreaLBPortal(int32_t LocationId, int32_t areaId, int32_t VariationID); // Function BP_LevelManager.BP_LevelManager_C.RequestSetVisibleAndWaitAreaLBPortal // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartPlayerAtTransform(struct FTransform Transform); // Function BP_LevelManager.BP_LevelManager_C.StartPlayerAtTransform // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckUnloadLevels(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.CheckUnloadLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadAreaLBPortalAsync(bool SetVisbleAfterLoad, int32_t LocationId, int32_t areaId, bool SkipEnemyLevels, int32_t LoadLocationID, int32_t LoadAreaID, int32_t LoadVariationID); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaLBPortalAsync // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLBPortalLevelsLoaded(int32_t LocationId, int32_t areaId, int32_t VariationID, bool RawCheck, bool IsLoaded, bool IsError, struct FS_AreaInfo Area_Info); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoaded // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLBPortalLevelsLoadedByInfo(struct FName AreaName, bool RawCheck, bool IsLoaded); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoadedByInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLBPortalLevelsLoadedByAreaName(struct FName AreaName, bool RawCheck, bool IsLoaded, bool IsError, struct FS_AreaInfo Area_Info); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLBPortalLevelsLoadedByAreaName // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLBPortalLevelInLoadedAreaInfos(struct TSoftObjectPtr<UObject> Level, bool IsExist); // Function BP_LevelManager.BP_LevelManager_C.IsLBPortalLevelInLoadedAreaInfos // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLbAndPortalLevelInArea(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct FS_AreaInfo AreaInfo, bool Error); // Function BP_LevelManager.BP_LevelManager_C.GetLbAndPortalLevelInArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TweakStreamSettingsInGame(struct FRSStreamingSettings Settings); // Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettingsInGame // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadLevelAsync(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadLevelAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadLevelAsync(bool Visible, struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadLevelAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAreaInfoCacheDirty(bool Dirty); // Function BP_LevelManager.BP_LevelManager_C.SetAreaInfoCacheDirty // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintAreaNames(struct TArray<struct FName> AreaNames, struct FText DoText); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintAreaNames // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetCurrentCameraType(struct FName camera type, bool return); // Function BP_LevelManager.BP_LevelManager_C.GetCurrentCameraType // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintLoadedLevels(); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintLoadedLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void AppendArrayUnique(struct TArray<struct FName> DistNames, struct TArray<struct FName> AppendNames); // Function BP_LevelManager.BP_LevelManager_C.AppendArrayUnique // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckNeedLevelInLoadedLevels(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.CheckNeedLevelInLoadedLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckExistQueueLoadCommand(bool Exist); // Function BP_LevelManager.BP_LevelManager_C.CheckExistQueueLoadCommand // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UnloadAreaAllLevels(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.UnloadAreaAllLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UnloadAllLevels(); // Function BP_LevelManager.BP_LevelManager_C.UnloadAllLevels // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitAnyLoadEnd(); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitAnyLoadEnd // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadAllLevel(); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAllLevel // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _UnloadAllAreas(); // Function BP_LevelManager.BP_LevelManager_C._UnloadAllAreas // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLocationNameFromAreaName(struct FName AreaName, struct FString LocationString); // Function BP_LevelManager.BP_LevelManager_C.GetLocationNameFromAreaName // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1685580
	void IsWaitingLoadOrVisible(bool IsWaiting); // Function BP_LevelManager.BP_LevelManager_C.IsWaitingLoadOrVisible // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsWaitingAnySetVisibility(bool Waiting); // Function BP_LevelManager.BP_LevelManager_C.IsWaitingAnySetVisibility // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetLevelInfoCheckVisible(struct TSoftObjectPtr<UObject> Level, bool CheckVisible); // Function BP_LevelManager.BP_LevelManager_C.SetLevelInfoCheckVisible // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ResetCheckVisibleLevelAll(); // Function BP_LevelManager.BP_LevelManager_C.ResetCheckVisibleLevelAll // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetCurrentSceneType(enum class E_SceneType SceneType); // Function BP_LevelManager.BP_LevelManager_C.GetCurrentSceneType // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetCurrentSceneType(enum class E_SceneType SceneType, enum class E_SceneType OldSceneType); // Function BP_LevelManager.BP_LevelManager_C.SetCurrentSceneType // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void LoadEventTriggerBoxAsset(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.LoadEventTriggerBoxAsset // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsExistAreaInfo(struct FName AreaName, bool found); // Function BP_LevelManager.BP_LevelManager_C.IsExistAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaInLoadedAreaInfos(struct FName AreaName, bool IsLoaded, bool IsExist, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.IsAreaInLoadedAreaInfos // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrint_Levels(struct TArray<struct TSoftObjectPtr<UObject>> objs, struct FText Header); // Function BP_LevelManager.BP_LevelManager_C.DebugPrint_Levels // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAllLevelInLoadedAreaInfo(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct FS_AreaInfo AreaInfo, bool Error); // Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInLoadedAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromArrangePointAreaInfo_1(struct TArray<struct FName> InfoNames, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromArrangePointAreaInfo_1 // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void MakeTweakedAreaInfo(struct FS_AreaSettingsInfo AreaSettings, bool SkipEnemyLevels, bool SkipEventLevels, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.MakeTweakedAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadAreaAsyncByShortAreaName(bool SetVisbleAfterLoad, struct FName ShortAreaName, bool SkipEnemyLevels, int32_t LoadLocationID, int32_t LoadAreaID, int32_t LoadVariationID); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaAsyncByShortAreaName // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Request Load Area Async(bool SetVisbleAfterLoad, int32_t LocationId, int32_t areaId, bool SkipEnemyLevels, bool SkipEventLevels, int32_t LoadLocationID, int32_t LoadAreaID, int32_t LoadVariationID); // Function BP_LevelManager.BP_LevelManager_C.Request Load Area Async // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadAreaImmediateAsync(bool SetVisbleAfterLoad, int32_t LocationId, int32_t areaId, int32_t VariationID, bool SkipEnemyLevels, bool SkipEventLevels); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaImmediateAsync // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetLevelVisible(bool Visible, struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.RequestSetLevelVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ExecAreaInfoTweakReplace(struct FS_AreaSettingsInfo Settings, enum class EAreaInfoType AreaInfoType, struct TArray<struct FName> InfoNames, enum class E_SceneType SceneType, struct FS_AreaSettingsInfo OutSettings); // Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakReplace // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ExecAreaInfoTweakDelete(struct FS_AreaSettingsInfo Settings, enum class EAreaInfoType AreaInfoType, struct TArray<struct FName> InfoNames, struct FS_AreaSettingsInfo OutSettings); // Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakDelete // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ExecAreaInfoTweakAdd(struct FS_AreaSettingsInfo Settings, enum class EAreaInfoType AreaInfoType, struct TArray<struct FName> InfoNames, struct FS_AreaSettingsInfo OutSettings); // Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweakAdd // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ExecAreaInfoTweaks(struct FS_AreaSettingsInfo Settings, struct TArray<struct FS_AreaInfoTweakExec> TweakExecs, struct FS_AreaSettingsInfo OutSettings); // Function BP_LevelManager.BP_LevelManager_C.ExecAreaInfoTweaks // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckTweakCondition(struct FS_AreaInfoTweakCondition Condition, bool Result); // Function BP_LevelManager.BP_LevelManager_C.CheckTweakCondition // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckTweakAllConditions(struct TArray<struct FS_AreaInfoTweakCondition> Conditions, bool AllOk); // Function BP_LevelManager.BP_LevelManager_C.CheckTweakAllConditions // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TweakAreaSettings(struct FS_AreaSettingsInfo Settings, struct FS_AreaSettingsInfo OutSettings, struct TArray<bool> ConditionResults); // Function BP_LevelManager.BP_LevelManager_C.TweakAreaSettings // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAreaInfoAfterTweak(struct FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, struct FS_AreaInfo AreaInfo, bool found); // Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoAfterTweak // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLevelsLoaded(int32_t LocationId, int32_t areaId, int32_t VariationID, bool RawCheck, bool IsLoaded, bool IsError, struct FS_AreaInfo Area_Info); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoaded // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void InitAreaInfo(); // Function BP_LevelManager.BP_LevelManager_C.InitAreaInfo // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAreaInfoNames(struct TArray<struct FName> Names); // Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoNames // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAreaInfo(struct FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, struct FS_AreaInfo AreaInfo, bool found); // Function BP_LevelManager.BP_LevelManager_C.GetAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromNPCAreaInfo(struct TArray<struct FName> InfoNames, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromNPCAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromNObjAreaInfo(struct TArray<struct FName> InfoNames, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromNObjAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromEventAreaInfo(struct TArray<struct FName> InfoNames, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromEventAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromEnemyAreaInfo(struct TArray<struct FName> InfoNames, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromEnemyAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLevelsFromBGAreaInfo(struct TArray<struct FName> BGAreaInfoNames, struct TArray<struct TSoftObjectPtr<UObject>> PreloadLevels, struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct TArray<struct TSoftObjectPtr<UObject>> LbaAndPortalLevels); // Function BP_LevelManager.BP_LevelManager_C.GetLevelsFromBGAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void MakeAreaInfo(struct FName AreaName, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.MakeAreaInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetTextureStreaming(bool on); // Function BP_LevelManager.BP_LevelManager_C.SetTextureStreaming // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetStreamSettings(struct FName Name, struct FRSStreamingSettings Settings); // Function BP_LevelManager.BP_LevelManager_C.GetStreamSettings // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TweakStreamSettingsInLoading(struct FRSStreamingSettings Settings); // Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettingsInLoading // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TweakStreamSettings(struct FName Name, struct FRSStreamingSettings Settings); // Function BP_LevelManager.BP_LevelManager_C.TweakStreamSettings // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void InitStreamingSettings(); // Function BP_LevelManager.BP_LevelManager_C.InitStreamingSettings // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetStreamSettingsInLoading(); // Function BP_LevelManager.BP_LevelManager_C.SetStreamSettingsInLoading // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetStreamSettingsInGame(); // Function BP_LevelManager.BP_LevelManager_C.SetStreamSettingsInGame // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetStreamSettings(struct FName RowName); // Function BP_LevelManager.BP_LevelManager_C.SetStreamSettings // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetAreaPreloadVisible(struct FName AreaName, bool Async); // Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaPreloadVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadAssetAsync(struct TSoftObjectPtr<UObject> Asset); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAssetAsync // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void AreaNameToID_Internal(struct FName AreaName, int32_t LocationId, int32_t areaId, int32_t VariationID); // Function BP_LevelManager.BP_LevelManager_C.AreaNameToID_Internal // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintLoadInfo(); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintLoadInfo // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugFilterLevels(struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct TArray<struct TSoftObjectPtr<UObject>> FilteredLevels); // Function BP_LevelManager.BP_LevelManager_C.DebugFilterLevels // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetAllLevelUnvisible(bool Visible); // Function BP_LevelManager.BP_LevelManager_C.RequestSetAllLevelUnvisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadDynamicLevel(); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadDynamicLevel // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _IsAreaPreloadVisible(struct FName AreaName, bool AllVisible); // Function BP_LevelManager.BP_LevelManager_C._IsAreaPreloadVisible // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetPreloadLevelInArea(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct FS_AreaInfo AreaInfo, bool Error); // Function BP_LevelManager.BP_LevelManager_C.GetPreloadLevelInArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetAreaPreloadOnlyVisible(struct FName AreaName, bool Async); // Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaPreloadOnlyVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitAreaPreloadVisible(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaPreloadVisible // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaReadyForStart(struct FName AreaName, bool IsReady); // Function BP_LevelManager.BP_LevelManager_C.IsAreaReadyForStart // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetVisibleLevelsAndWait(struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct FName AreaName, bool Visible); // Function BP_LevelManager.BP_LevelManager_C.RequestSetVisibleLevelsAndWait // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetLevelVisibleFlag(bool Visible, struct TSoftObjectPtr<UObject> Levels); // Function BP_LevelManager.BP_LevelManager_C.SetLevelVisibleFlag // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelVisibleInLoadedLevelInfo(struct TSoftObjectPtr<UObject> Level, bool Visible, bool Error); // Function BP_LevelManager.BP_LevelManager_C.IsLevelVisibleInLoadedLevelInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartPlayerAtActor(struct AActor* Portal); // Function BP_LevelManager.BP_LevelManager_C.StartPlayerAtActor // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartPlayerWithPortalName(struct FString PortalName, struct TArray<struct APlayerStart*> Portals); // Function BP_LevelManager.BP_LevelManager_C.StartPlayerWithPortalName // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetStatToLoadedLevel(struct TSoftObjectPtr<UObject> Level, enum class E_LevelLoadStatus Status); // Function BP_LevelManager.BP_LevelManager_C.SetStatToLoadedLevel // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetUnusedLevelWhenUnloadArea(struct FName UnloadAreaName, struct FName NextAreaName, struct TArray<struct TSoftObjectPtr<UObject>> ShouldUnloadLevels); // Function BP_LevelManager.BP_LevelManager_C.GetUnusedLevelWhenUnloadArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAllAreaInfoLevels(struct FName AdditionalArea, struct FName RemoveArea, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetAllAreaInfoLevels // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RemoveLevelFromLevelInfo(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.RemoveLevelFromLevelInfo // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelInLoadedLevelInfo(struct TSoftObjectPtr<UObject> Level, struct FS_LoadedLevelInfo LevelInfoRef, bool Exist); // Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedLevelInfo // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpdateLoadedLevels(); // Function BP_LevelManager.BP_LevelManager_C.UpdateLoadedLevels // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetCallbackPlayerStartAfterAreaVisible(struct FString PortalName); // Function BP_LevelManager.BP_LevelManager_C.RequestSetCallbackPlayerStartAfterAreaVisible // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ResetPlayerTransform(); // Function BP_LevelManager.BP_LevelManager_C.ResetPlayerTransform // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetSceneSystemLevelsByArea(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetSceneSystemLevelsByArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAllLevelInAreaWithoutSystem(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels, bool Error); // Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInAreaWithoutSystem // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadAssetAsync(struct TSoftObjectPtr<UObject> Asset); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadAssetAsync // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _RequestLoadAssetPackAsync(struct FName AssetPackName); // Function BP_LevelManager.BP_LevelManager_C._RequestLoadAssetPackAsync // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _RequestCancelLoadAreaAsync(struct FName AreaName, bool SetVisbleAfterLoad); // Function BP_LevelManager.BP_LevelManager_C._RequestCancelLoadAreaAsync // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintCommandInfo(struct FS_LevelManagerCommand Command); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintCommandInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitAreaUnvisible(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaUnvisible // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitAreaVisible(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitAreaVisible // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaUnvisible(struct FName AreaName, bool AllUnvisible); // Function BP_LevelManager.BP_LevelManager_C.IsAreaUnvisible // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAllLevelInArea(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> Levels, struct FS_AreaInfo AreaInfo, bool Error); // Function BP_LevelManager.BP_LevelManager_C.GetAllLevelInArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaVisible(struct FName AreaName, bool AllVisible); // Function BP_LevelManager.BP_LevelManager_C.IsAreaVisible // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetSystemLevel(enum class E_SceneType SceneType, struct TSoftObjectPtr<UObject> SystemLevel, bool found); // Function BP_LevelManager.BP_LevelManager_C.GetSystemLevel // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetUnusedSystemLevelName(struct FName WillUnloadAreaName, bool found, struct TSoftObjectPtr<UObject> UnusedSystemLevel); // Function BP_LevelManager.BP_LevelManager_C.GetUnusedSystemLevelName // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _RequestUnloadUnsedSystemLevelAsync(struct FName AreaName, bool SetVisbleAfterLoad); // Function BP_LevelManager.BP_LevelManager_C._RequestUnloadUnsedSystemLevelAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void __IsPackInOtherLoadedArea(struct FPrimaryAssetType PAT, struct FName ExcludeAreaName, bool found); // Function BP_LevelManager.BP_LevelManager_C.__IsPackInOtherLoadedArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAreaSystemLevelNames(struct FName AreaName, struct TArray<struct TSoftObjectPtr<UObject>> LevelNames); // Function BP_LevelManager.BP_LevelManager_C.GetAreaSystemLevelNames // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetSceneSystemLevels(enum class E_SceneType Scene, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.GetSceneSystemLevels // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _SetAreaOnlyVisible(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C._SetAreaOnlyVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAllLevelsVisible(bool Visible); // Function BP_LevelManager.BP_LevelManager_C.SetAllLevelsVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void __RequestSetAreaVisibleAsync(struct FName AreaName, bool IsVisible); // Function BP_LevelManager.BP_LevelManager_C.__RequestSetAreaVisibleAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelInOtherLoadedArea(struct TSoftObjectPtr<UObject> Level, struct FName ExcludeAreaName, bool found); // Function BP_LevelManager.BP_LevelManager_C.IsLevelInOtherLoadedArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLevelsUnloadedWithoutOtherAreaUsing(struct FName AreaName, bool IsUnloaded, bool Error); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsUnloadedWithoutOtherAreaUsing // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLevelsLoadedByInfo(struct FName AreaName, bool RawCheck, bool IsLoaded); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoadedByInfo // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UnregisterPackToLoaded(struct FPrimaryAssetType LevelName, bool IsError); // Function BP_LevelManager.BP_LevelManager_C.UnregisterPackToLoaded // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RegisterPackToLoaded(struct FPrimaryAssetType Name, bool IsAlreadyExists); // Function BP_LevelManager.BP_LevelManager_C.RegisterPackToLoaded // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UnregisterLevelToLoaded(struct TSoftObjectPtr<UObject> Level, struct FName AreaName, bool IsError); // Function BP_LevelManager.BP_LevelManager_C.UnregisterLevelToLoaded // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RegisterLevelToLoaded(struct TSoftObjectPtr<UObject> Level, struct FName AreaName, bool IsAlreadyExists); // Function BP_LevelManager.BP_LevelManager_C.RegisterLevelToLoaded // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelInLoadedAreaInfosWithExclude(struct TSoftObjectPtr<UObject> Level, struct TArray<struct FName> ExcludeAreaName, bool IsExist); // Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedAreaInfosWithExclude // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelInLoadedAreaInfos(struct TSoftObjectPtr<UObject> Level, bool IsExist); // Function BP_LevelManager.BP_LevelManager_C.IsLevelInLoadedAreaInfos // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintCommandQueue(); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintCommandQueue // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintStatus(); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintStatus // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaLevelsLoadedByAreaName(struct FName AreaName, bool RawCheck, bool IsLoaded, bool IsError, struct FS_AreaInfo Area_Info); // Function BP_LevelManager.BP_LevelManager_C.IsAreaLevelsLoadedByAreaName // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _RequestUnloadAllArea(); // Function BP_LevelManager.BP_LevelManager_C._RequestUnloadAllArea // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void _RequestUnloadUnusedArea(); // Function BP_LevelManager.BP_LevelManager_C._RequestUnloadUnusedArea // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestChangeArea(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestChangeArea // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpdateLoadedAreaInfoStatus(); // Function BP_LevelManager.BP_LevelManager_C.UpdateLoadedAreaInfoStatus // (Private|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitUnloadArea(struct FName AreaName, struct FName NextAreaName, bool Async); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitUnloadArea // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestWaitLoadArea(struct FName AreaName, bool Async); // Function BP_LevelManager.BP_LevelManager_C.RequestWaitLoadArea // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetNotCurrentLoadedAreaInfos(struct FName AreaName, struct TArray<struct FS_AreaInfo> Infos); // Function BP_LevelManager.BP_LevelManager_C.GetNotCurrentLoadedAreaInfos // (Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetAreaOnlyVisibleAsync(struct FName AreaName, bool Async); // Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaOnlyVisibleAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RemoveRedundantLevelCommand(struct FName LevelName); // Function BP_LevelManager.BP_LevelManager_C.RemoveRedundantLevelCommand // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void AddOrUpdateLoadedAreaInfo(struct FName Name, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.AddOrUpdateLoadedAreaInfo // (Private|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelsLoaded(struct TArray<struct TSoftObjectPtr<UObject>> Levels, bool CheckRaw, bool IsLoaded); // Function BP_LevelManager.BP_LevelManager_C.IsLevelsLoaded // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsLevelsUnloaded(struct TArray<struct TSoftObjectPtr<UObject>> Levels, bool CheckRaw, bool Unloaded); // Function BP_LevelManager.BP_LevelManager_C.IsLevelsUnloaded // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetNotCurrentAreaName(struct TArray<struct FName> AreaNames); // Function BP_LevelManager.BP_LevelManager_C.GetNotCurrentAreaName // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RemoveLoadedAreaInfo(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RemoveLoadedAreaInfo // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RemoveLoadedAreaInfoForce(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RemoveLoadedAreaInfoForce // (Private|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DebugPrintArealInfoMap(); // Function BP_LevelManager.BP_LevelManager_C.DebugPrintArealInfoMap // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpdateCurrentLevelCommandStatus(enum class E_LevelCommandStatus Status); // Function BP_LevelManager.BP_LevelManager_C.UpdateCurrentLevelCommandStatus // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAreaInfoStatus(struct FName AreaName, enum class E_LevelLoadStatus Status, bool Error, enum class E_LevelLoadStatus OldStatus); // Function BP_LevelManager.BP_LevelManager_C.SetAreaInfoStatus // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestUnloadAreaAsync(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.RequestUnloadAreaAsync // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAreaInLoadedAreaInfosWithCondition(struct FName AreaName, bool IsLoaded, bool IsExist, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.IsAreaInLoadedAreaInfosWithCondition // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void FullPathToLevelName(struct FName FullPath, struct FName LevelName); // Function BP_LevelManager.BP_LevelManager_C.FullPathToLevelName // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetLevelsVisibleFlag(bool Visible, struct TArray<struct TSoftObjectPtr<UObject>> Levels); // Function BP_LevelManager.BP_LevelManager_C.SetLevelsVisibleFlag // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestSetAreaVisible(struct FName AreaName, bool Async, bool Visible); // Function BP_LevelManager.BP_LevelManager_C.RequestSetAreaVisible // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAreaVisibleFlag(bool Visible, struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.SetAreaVisibleFlag // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAreaInfoFromDB(struct FName AreaName, bool isFound, struct FS_AreaInfo AreaInfo); // Function BP_LevelManager.BP_LevelManager_C.GetAreaInfoFromDB // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void FinishLevelCommand(bool IsError); // Function BP_LevelManager.BP_LevelManager_C.FinishLevelCommand // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartLevelCommand(); // Function BP_LevelManager.BP_LevelManager_C.StartLevelCommand // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void AddLevelCommand(enum class E_LevelManagerCommand Command, struct FName argName, struct FName ArgName2, bool Flag, struct TSoftObjectPtr<UObject> Asset, bool Flag2, int32_t CommandNum); // Function BP_LevelManager.BP_LevelManager_C.AddLevelCommand // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetCurrentLevelCommand(struct FS_LevelManagerCommand Command, bool isFound); // Function BP_LevelManager.BP_LevelManager_C.GetCurrentLevelCommand // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CleanLoadedAreaInfos(); // Function BP_LevelManager.BP_LevelManager_C.CleanLoadedAreaInfos // (Private|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetCurrentArea(struct FName AreaName, bool Result); // Function BP_LevelManager.BP_LevelManager_C.SetCurrentArea // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestLoadAreaImmediateByAreaName(struct FName AreaName, bool SetVisbleAfterLoad, bool SkipEnemyLevels, bool SkipEventLevels); // Function BP_LevelManager.BP_LevelManager_C.RequestLoadAreaImmediateByAreaName // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishUnloadArea(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadArea // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishUnloadLevel(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadLevel // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishLoadPack(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadPack // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishUnloadPack(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishUnloadPack // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishLoadArea(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadArea // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishLoadPackDispatcher_Event_1(struct FPrimaryAssetType Pack); // Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadPackDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishUnloadPackDispatcher_Event_1(struct FPrimaryAssetType Pack); // Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadPackDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindSetPlayerStartAfterFinishAreaVisible(struct FString PortalName); // Function BP_LevelManager.BP_LevelManager_C.BindSetPlayerStartAfterFinishAreaVisible // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CallbackSetAreaVisibleFinishedAndSetPlayer(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.CallbackSetAreaVisibleFinishedAndSetPlayer // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishUnloadLevelDispatcher_Event_1(struct TSoftObjectPtr<UObject> LevelName, struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadLevelDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishUnloadAreaDispatcher_Event_1(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishUnloadAreaDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishLoadLevelDispatcher_Event_1(struct TSoftObjectPtr<UObject> LevelName, struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadLevelDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishLoadAreaDispatcher_Event_1(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadAreaDispatcher_Event_1 // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindOnStartCheckLevelVisible(); // Function BP_LevelManager.BP_LevelManager_C.BindOnStartCheckLevelVisible // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void OnStartCheckLevelVisible_Event(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.OnStartCheckLevelVisible_Event // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void OnEndCheckLevelVisible_Event(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.OnEndCheckLevelVisible_Event // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindOnEndCheckLevelVisible(); // Function BP_LevelManager.BP_LevelManager_C.BindOnEndCheckLevelVisible // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventInitBind(); // Function BP_LevelManager.BP_LevelManager_C.EventInitBind // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void BindEventFinishLoadLevel(); // Function BP_LevelManager.BP_LevelManager_C.BindEventFinishLoadLevel // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ReceiveBeginPlay(); // Function BP_LevelManager.BP_LevelManager_C.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x1685580
	void ReceiveTick(float DeltaSeconds); // Function BP_LevelManager.BP_LevelManager_C.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x1685580
	void ExecLevelCommand(struct FS_LevelManagerCommand Command); // Function BP_LevelManager.BP_LevelManager_C.ExecLevelCommand // (BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SyncUnloadStreamLevels(); // Function BP_LevelManager.BP_LevelManager_C.SyncUnloadStreamLevels // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void DelayBeginPlay(); // Function BP_LevelManager.BP_LevelManager_C.DelayBeginPlay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ExecuteUbergraph_BP_LevelManager(int32_t EntryPoint); // Function BP_LevelManager.BP_LevelManager_C.ExecuteUbergraph_BP_LevelManager // (Final|UbergraphFunction|HasDefaults) // @ game+0x1685580
	void OnEndCheckLevelVisible__DelegateSignature(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.OnEndCheckLevelVisible__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void OnStartCheckLevelVisible__DelegateSignature(struct TSoftObjectPtr<UObject> Level); // Function BP_LevelManager.BP_LevelManager_C.OnStartCheckLevelVisible__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishLoadAssetAsync__DelegateSignature(struct TSoftObjectPtr<UObject> LoadedAsset); // Function BP_LevelManager.BP_LevelManager_C.EventFinishLoadAssetAsync__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishWaitAreaUnvisibleDispatcher__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EventFinishWaitAreaVisibleDispatcher__DelegateSignature(struct FName AreaName); // Function BP_LevelManager.BP_LevelManager_C.EventFinishWaitAreaVisibleDispatcher__DelegateSignature // (Public|Delegate|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
};

