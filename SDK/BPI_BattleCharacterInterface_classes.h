// BlueprintGeneratedClass BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C
// Size: 0x28 (Inherited: 0x28)
struct UBPI_BattleCharacterInterface_C : UInterface {

	void GetPsychicObjectThrowParameter(bool apply, float directshot throw speed, float directshot homing speed, float combo throw speed, float combo homing speed, float brainfield throw speed, float brainfield homing speed, float intercept throw speed, float intercept homing speed); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetPsychicObjectThrowParameter // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsAttackerMainPlayer(bool bMainPlayer); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsAttackerMainPlayer // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void StopMovementImmediately(bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StopMovementImmediately // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetGroupIDInterface(bool bSuccess, int32_t GroupID, int32_t SubGroupID); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetGroupIDInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckNoDamagePopUpFromAttacker(bool bNoPopUp); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CheckNoDamagePopUpFromAttacker // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RegisterBrainFieldNormalTransform(struct FTransform InNormalTransform, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.RegisterBrainFieldNormalTransform // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void AreaChangeFadeOut(); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.AreaChangeFadeOut // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void Get Event Bind Mesh Component(struct TArray<struct UStaticMeshComponent*> MeshComponent); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.Get Event Bind Mesh Component // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsInScreen(bool InScreen); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsInScreen // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpdateSequencerEffectInterface(float DeltaSec, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.UpdateSequencerEffectInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EndSequencerEffectInterface(struct FName ClaimantName, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndSequencerEffectInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SpawnSequencerEffectInterface(struct FName ClaimantName, struct UParticleSystem* Template, struct FTransform Transform, struct FName AttachName, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SpawnSequencerEffectInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsEnableReactionCoefficient(bool bEnable, float ReactionSRate, float ReactionLRate, float DownRate, float CrashRate); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnableReactionCoefficient // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void DisableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.DisableReactionCoefficient // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EnableReactionCoefficient(bool bNormalAttack, bool bPsychicAttack, float ReactionSRate, float ReactionLRate, float DownRate, float CrashRate, bool return); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EnableReactionCoefficient // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetCharacterLV(int32_t LV); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetCharacterLV // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetAutoAimRate(float Rate); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetAutoAimRate // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void EndVisionFog(bool dummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndVisionFog // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RequestDie(bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.RequestDie // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsCounterWait(bool bWait); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsCounterWait // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsBrainCrashAccessInterface(bool bAccess); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsBrainCrashAccessInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void SetUseCameraDither(bool bUse, bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetUseCameraDither // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetCameraDither(float SetDitherValue, bool dummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCameraDither // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpdateCameraDither(float DeltaSeconds, bool UseDither, float CameraDither); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.UpdateCameraDither // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsEnableSlashEffect(struct FHCHitResult HitResult, bool bEnable); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnableSlashEffect // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsHitWeak_ChangeDefaultEffect(bool ChangeDefault); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsHitWeak_ChangeDefaultEffect // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void CanTakeBrainField(bool CanTake); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CanTakeBrainField // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void SetHitStopInterface(enum class HCRestictedHitStopType HitStopType, bool bCritical, bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetHitStopInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void EndSASChance(bool Dammy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.EndSASChance // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartSASChance(float Time, bool Dammy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StartSASChance // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CancelMeshFitGround(bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.CancelMeshFitGround // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetMeshFitGroundCheckLocation(struct FVector Location, float checkHeight); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetMeshFitGroundCheckLocation // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void MeshFitGround(float interpSpeed, float angleLimit, bool bEndFit, bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.MeshFitGround // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetAccelerating(bool Accelerating, bool Dammy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetAccelerating // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetAccelerating(bool Accelerating); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetAccelerating // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetLockOnTargetInterface(struct AActor* TargetActor); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetLockOnTargetInterface // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetNotifyAttackData(struct FFNotifyAttackData Data); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetNotifyAttackData // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void SetNotifyAttackData(struct FFNotifyAttackData Data, bool dummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetNotifyAttackData // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetActorStartPoint(struct FVector StartLocation); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetActorStartPoint // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void StartVisionFog(bool dummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.StartVisionFog // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetWeakTargetComponent(struct USceneComponent* WeakComponent); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakTargetComponent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsCounterSuccess(bool Success); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsCounterSuccess // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetCounter(); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCounter // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void SetCounterWait(bool wait on in); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCounterWait // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsBadStausMetalMode(); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsBadStausMetalMode // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void GetWeakUIPoint(int32_t Index, struct FVector Point); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakUIPoint // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetTopTargetPoint(struct FVector Point); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetTopTargetPoint // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetWeakTargetPoint(struct FVector AttackerPos, struct FVector Point); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetWeakTargetPoint // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsMetalMode(bool bMetal); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsMetalMode // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void SetCharacterVisibility(bool bVisibility, bool bDummy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.SetCharacterVisibility // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void IsEnemy(bool bEnemy); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsEnemy // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void IsPlayer(bool bPlayer); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.IsPlayer // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetTeam(enum class TeamKind Team); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.GetTeam // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void isForceCritical(bool bResult); // Function BPI_BattleCharacterInterface.BPI_BattleCharacterInterface_C.isForceCritical // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
};

