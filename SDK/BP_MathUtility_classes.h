// BlueprintGeneratedClass BP_MathUtility.BP_MathUtility_C
// Size: 0x28 (Inherited: 0x28)
struct UBP_MathUtility_C : UBlueprintFunctionLibrary {

	void IsInCameraSimple(struct FVector CheckLocation, struct UObject* __WorldContext, bool bin); // Function BP_MathUtility.BP_MathUtility_C.IsInCameraSimple // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void ClampCircleAngle(float BaseAngle, struct UObject* __WorldContext, float ClampAngle); // Function BP_MathUtility.BP_MathUtility_C.ClampCircleAngle // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void ClampRotationLimitAngle(struct FRotator baseRot, struct FRotator CheckRot, float limitDegree, struct UObject* __WorldContext, struct FRotator ClampRot); // Function BP_MathUtility.BP_MathUtility_C.ClampRotationLimitAngle // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void ClampVectorLimitAngle(struct FVector BaseVector, struct FVector CheckVector, float limitDegree, struct UObject* __WorldContext, struct FVector ClampVector); // Function BP_MathUtility.BP_MathUtility_C.ClampVectorLimitAngle // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CalcScreenRectFromBounds(struct USceneComponent* BoundsComponent, struct UObject* __WorldContext, struct FBox2D BoxSize, struct FBox2D BoxUV, bool Success); // Function BP_MathUtility.BP_MathUtility_C.CalcScreenRectFromBounds // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RandomLotSum(struct TArray<int32_t> HitArray, struct UObject* __WorldContext, int32_t HitIndex); // Function BP_MathUtility.BP_MathUtility_C.RandomLotSum // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void CalcAnySearchBase(struct UObject* __WorldContext, struct FVector baseLocation, struct FVector BaseDir); // Function BP_MathUtility.BP_MathUtility_C.CalcAnySearchBase // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TurnToTargetVector(struct FVector Src, struct FVector dst, float Angle, struct UObject* __WorldContext, struct FVector NewVector); // Function BP_MathUtility.BP_MathUtility_C.TurnToTargetVector // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void TurnToTargetRotation(struct FRotator Src, struct FRotator dst, float Angle, struct UObject* __WorldContext, struct FRotator NewRotate); // Function BP_MathUtility.BP_MathUtility_C.TurnToTargetRotation // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void UpDownVector(struct FVector Src, float Angle, struct UObject* __WorldContext, struct FVector Out); // Function BP_MathUtility.BP_MathUtility_C.UpDownVector // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RandomLotSequence(struct TArray<float> HitArray, struct UObject* __WorldContext, int32_t HitIndex); // Function BP_MathUtility.BP_MathUtility_C.RandomLotSequence // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void RandomLot(float HitPer, struct UObject* __WorldContext, bool IsHit); // Function BP_MathUtility.BP_MathUtility_C.RandomLot // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x1685580
	void GetTargetRangeAngle(struct FVector BaseDirection, struct FVector TargetDirection, struct UObject* __WorldContext, float RangeAngle); // Function BP_MathUtility.BP_MathUtility_C.GetTargetRangeAngle // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1685580
	void CalcRate(float Value, float Min, float Max, bool bClamp, struct UObject* __WorldContext, float Rate); // Function BP_MathUtility.BP_MathUtility_C.CalcRate // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void CheckDistanceFromVector(struct FVector Dist, float Distance, bool bIgnoreHeight, struct UObject* __WorldContext, bool bResult); // Function BP_MathUtility.BP_MathUtility_C.CheckDistanceFromVector // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1685580
	void checkDistance(struct FVector RefPos1, struct FVector RefPos2, float Distance, bool bIgnoreHeight, struct UObject* __WorldContext, bool bResult); // Function BP_MathUtility.BP_MathUtility_C.checkDistance // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1685580
	void GetTargetAngle(struct FVector BaseDirection, struct FVector TargetDirection, struct UObject* __WorldContext, float TargeDegreetAngle); // Function BP_MathUtility.BP_MathUtility_C.GetTargetAngle // (Static|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1685580
};

